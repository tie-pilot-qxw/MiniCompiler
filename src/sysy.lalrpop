use crate::ast::*;// {CompUnit, FuncDef, FuncType, Block, Stmt, Number};

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
    // 跳过空白符和注释
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {}, // 跳过“ // ... ”类型的注释
    r"/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+/" => {}, // 跳过“ /* ... */ ”类型的注释
    // 剩下的情况采用默认方式处理
    _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值

pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 同上, 不解释
FuncDef: FuncDef = {
    <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
        FuncDef{ <> }
    }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp: Exp> ";" => Stmt { <> };

Exp: Exp = <l_or_exp: LOrExp> => Exp { <> };

LOrExp: LOrExp = {
    <l_and_exp: LAndExp> => LOrExp::LAndExp( <> ),
    <l_or_exp: LOrExp> "||" <l_and_exp: LAndExp> => LOrExp::Or( Box::new(l_or_exp), l_and_exp ),
};

LAndExp: LAndExp = {
    <eq_exp: EqExp> => LAndExp::EqExp( <> ),
    <l_and_exp: LAndExp> "&&" <eq_exp: EqExp> => LAndExp::And( Box::new(l_and_exp), eq_exp ),
};

EqExp: EqExp = {
    <rel_exp: RelExp> => EqExp::RelExp( <> ),
    <eq_exp: EqExp> <sign: EqSign> <rel_exp: RelExp> => EqExp::Eq( Box::new(eq_exp), sign, rel_exp ),
};

EqSign: EqSign = {
    "==" => EqSign::Eq,
    "!=" => EqSign::Neq,
};

RelExp: RelExp = {
    <add_exp: AddExp> => RelExp::AddExp( <> ),
    <rel_exp: RelExp> <sign: CmpSign> <add_exp: AddExp> => RelExp::Cmp( Box::new(rel_exp), sign, add_exp ),
};

CmpSign: CmpSign = {
    "<=" => CmpSign::Leq,
    ">=" => CmpSign::Meq,
    "<" => CmpSign::Less,
    ">" => CmpSign::More,
};

MulExp: MulExp = {
    <unary_exp: UnaryExp> => MulExp::UnaryExp( <> ),
    <mul_exp: MulExp> <sign: MulSign> <unary_exp: UnaryExp> => MulExp::MulExp( Box::new(mul_exp), sign, unary_exp ),
};

MulSign: MulSign = {
    "*" => MulSign::Mul,
    "/" => MulSign::Div,
    "%" => MulSign::Mod,
};

AddExp: AddExp = {
    <mul_exp: MulExp> => AddExp::MulExp( <> ),
    <add_exp: AddExp> <sign: AddSign> <mul_exp: MulExp> => AddExp::AddExp( Box::new(add_exp), sign, mul_exp  ),
};

AddSign: AddSign = {
    "+" => AddSign::Add,
    "-" => AddSign::Sub,
};

PrimaryExp: PrimaryExp = {
    "(" <exp: Exp> ")" => PrimaryExp::Exp ( Box::new( <> ) ),
    <num: Number> => PrimaryExp::Number ( <> ),
};

Number: Number = <num: IntConst> => Number { <> };

UnaryExp: UnaryExp = {
    <prim_exp: PrimaryExp> => UnaryExp::PrimaryExp ( <> ),
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => UnaryExp::Unary( unary_op, Box::new(unary_exp) ),
    "+"<UnaryExp> => <>
};

UnaryOp: UnaryOp = {
    "-" => UnaryOp::Negative,
    "!" => UnaryOp::Bang,
};

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
